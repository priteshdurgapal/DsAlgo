DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    factory.setNamespaceAware(true); // never forget this!
    DocumentBuilder builder = factory.newDocumentBuilder();
    Document doc = builder.parse("inventory.xml");

    //Create XPath
    XPathFactory xpathfactory = XPathFactory.newInstance();
    XPath xpath = xpathfactory.newXPath();
    xpath.setNamespaceContext(new NamespaceContext() {
      @Override
      public String getNamespaceURI(String prefix) {
        if("soapenv".equals(prefix)){
          return "http://www.w3.org/1999/xlink";
        }else{
          return null;
        }
      }

      @Override
      public String getPrefix(String namespaceURI) {
        return null;
      }

      @Override
      public Iterator getPrefixes(String namespaceURI) {
        return null;
      }
    });

   // System.out.println("1) Get book titles written after 2001");

    //XPathExpression expr = xpath.compile(".//*[@xlink:href]");
    XPathExpression expr = xpath.compile("//@soapenv:href");
    Object result = expr.evaluate(doc, XPathConstants.NODESET);
    NodeList nodes = (NodeList) result;
   System.out.println(nodes.getLength());
    for (int i = 0; i < nodes.getLength(); i++) {
      System.out.println(nodes.item(i).getNodeValue());
      Element test = findParentNodeByUrn(doc,nodes.item(i).getNodeValue());

      StringBuilder formPath = new StringBuilder();
      formPath.append(test.getLocalName());
      String uuid=null;
      for(int k=100;k>=0;k--) {

        String tempParent = test.getParentNode().getLocalName();
        if(!tempParent.equals("timeSlice")) {
          formPath.append(".").append(tempParent);
          test = (Element) test.getParentNode();
        }
        else {

          Node tt = test.getParentNode();
          Element id = (Element)tt.getParentNode();
          uuid = id.getElementsByTagName("gml:identifier").item(0).getTextContent();
          break;

        }
      }
      System.out.println(formPath);
      System.out.println(uuid);
      System.out.println("==========");
    }


    }

  private static Element findParentNodeByUrn(Document document, String urnId) {
    NodeList nodeList = document.getElementsByTagName("*");

    for (int i = 0; i < nodeList.getLength(); i++) {
      Node node = nodeList.item(i);

      if (node.getNodeType() == Node.ELEMENT_NODE) {
        Element element = (Element) node;

        // Check if the element has the xlink:href attribute with the specified URN ID
        String xlinkHrefValue = element.getAttribute("xlink:href");
        if (xlinkHrefValue.equals(urnId)) {
          // Return the parent node
          return element;
        }
      }
    }